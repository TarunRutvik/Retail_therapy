pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKER_REGISTRY_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building the project...'
                sh 'mkdir -p build'
                sh 'cp -r src build/' // Specify necessary files to build
                archiveArtifacts artifacts: 'build//*', allowEmptyArchive: true
            }
        }

        stage('Test') {
            steps {
               echo 'Running automated tests...'
               sh 'npm install htmlhint selenium-webdriver' // Local installation
               sh 'htmlhint build//*.html' // Run HTML validation
               sh 'mvn clean test' // Run Maven tests
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'Analyzing code quality with SonarQube...'
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                    mvn sonar:sonar \
                        -Dsonar.projectKey=Retail-Therapy \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application to Test Environment...'
                def imageName = "yourapp:${env.BUILD_NUMBER}"
                sh "docker build -t ${imageName} ."
                sh "docker run -d -p 8080:80 ${imageName}"
            }
        }

        stage('Release') {
            steps {
                echo 'Releasing to production...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        def app = docker.build('yourapp:latest')
                        app.push('latest')
                    }
                }
                sh 'kubectl apply -f kubernetes/production-deployment.yml' // Adjust to your setup
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                echo 'Setting up monitoring...'
                sh 'datadog-agent run'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker-compose down' // Or remove individual containers/images if needed
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
            emailext to: 'team@example.com', subject: 'Pipeline Failed', body: "Pipeline ${env.JOB_NAME} failed at stage ${env.STAGE_NAME}"
       }
    }
}
