pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKER_REGISTRY_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building the project...'
                dir('6.2/pom.xml')
                bat 'mvn clean package'
                archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: false
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'mvn test'
                junit '/target/surefire-reports/*.xml' // Publish test results
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('SonarQubeServer') { // Inject SonarQube environment variables
                    bat 'mvn sonar:sonar -Dsonar.projectKey=your-project'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                echo 'Building and pushing Docker image...'
                script {
                    // Declare variables inside the script block
                    def imageName = "yourapp:${env.BUILD_NUMBER}"
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        def app = docker.build(imageName)
                        app.push()
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                script {
                    def imageName = "yourapp:${env.BUILD_NUMBER}"
                    bat "docker run -d -p 8080:80 ${imageName}"
                }
            }
        }
    }

    post {
        always {
           echo 'Cleaning up Docker containers...'
        bat 'for /f "tokens=*" %i in (\'docker ps -q\') do docker rm %i'
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed.'
    }
   }
}